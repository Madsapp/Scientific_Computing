# The functions defined in this file, together with the data file 'chladni-basis.npy'
# allow you to look at your solutions to the Chladni plate problem.
#
# It works quite simply by dotting your coefficient vectors into the set of basis
# functions, defined on a 500x500 grid, then showing the result with pyplot.
#
# show_waves(x) shows the actual wave-functions
# show_nodes(x) shows the wavefunction zeros, where the sand gathers
# show_all_wavefunction_nodes(U,lambdas) shows the zeros of all the eigenfunctions defined by the columns of U

import numpy as np
import matplotlib.pyplot as plt

basis_set = np.load("chladni_basis.npy")


C_vector = np.array([[ 8.18436542e-01],
       [-5.69644001e-01],
       [ 7.22613633e-02],
       [-1.28474947e-02],
       [-4.53119085e-03],
       [-1.61172654e-02],
       [ 1.46007752e-04],
       [ 4.10824135e-04],
       [ 2.91644032e-04],
       [-4.91471738e-05],
       [ 2.05835421e-06],
       [ 3.69373828e-06],
       [-8.94918833e-08],
       [-1.58536904e-10],
       [-9.31169247e-13]])

C2_vector = np.array([[-5.22695899e-01],
       [-6.52604161e-01],
       [ 5.45916882e-01],
       [-4.33414908e-02],
       [ 2.88009603e-02],
       [ 6.78078002e-03],
       [ 1.06638192e-02],
       [-9.22230813e-04],
       [ 1.73998295e-03],
       [ 9.96462299e-05],
       [-1.85792158e-06],
       [ 7.24596969e-07],
       [-4.19546606e-08],
       [ 2.04061192e-10],
       [ 3.28398886e-12]])

C3 = np.array([ 1.72220402e-05,  2.44839582e-06,  1.36460327e-05,  2.14979703e-04,
        2.24507847e-05, -2.56787769e-04,  1.95378581e-05, -2.81798119e-04,
        1.04920041e-04, -2.64360993e-05,  2.46986784e-06,  3.31427342e-06,
        7.20672270e-05, -3.17579439e-03,  9.99994852e-01])


def vector_to_function(x,basis_set):
    return np.sum(x[:,None,None]*basis_set[:,:,:],axis=0)

def show_waves(x,basis_set=basis_set):
    fun = vector_to_function(x,basis_set)
    plt.matshow(fun,origin='lower',extent=[-1,1,-1,1])
    plt.show()

def show_nodes(x,basis_set=basis_set):
    fun   = vector_to_function(x,basis_set)
    nodes = np.exp(-50*fun**2)
    plt.matshow(nodes,origin='lower',extent=[-1,1,-1,1],cmap='PuBu')
    plt.show()

Vecs = np.array([[-8.18436542e-01,  5.69644001e-01, -7.22613634e-02,
         1.28474947e-02,  4.53119085e-03,  1.61172654e-02,
        -1.46007752e-04, -4.10824135e-04, -2.91644032e-04,
         4.91471738e-05, -2.05835421e-06, -3.69373828e-06,
         8.94918833e-08,  1.58536904e-10,  9.31169247e-13],
       [ 5.22695899e-01,  6.52604161e-01, -5.45916882e-01,
         4.33414909e-02, -2.88009603e-02, -6.78078000e-03,
        -1.06638192e-02,  9.22230813e-04, -1.73998295e-03,
        -9.96462299e-05,  1.85792158e-06, -7.24596968e-07,
         4.19546622e-08, -2.04060919e-10, -3.28375574e-12],
       [ 2.33680814e-01,  4.23762146e-01,  7.70523978e-01,
         3.26903130e-01,  1.36406928e-01,  1.98967780e-01,
        -8.39333838e-02, -1.67588776e-03, -1.62998056e-03,
         8.69836828e-04, -3.30551835e-05,  1.03844870e-05,
        -4.07846503e-07,  5.32483082e-09,  3.70676757e-11],
       [ 1.04486221e-01,  2.21049788e-01,  3.11658253e-01,
        -6.97753708e-01, -9.41529355e-03, -5.48682244e-01,
         2.34528644e-01,  3.44066934e-03, -8.49213707e-03,
        -1.58018463e-04,  6.78444764e-07, -5.13522168e-06,
         1.57494694e-07, -1.57779557e-09, -2.00775527e-12],
       [ 1.00944944e-03,  5.38276879e-02,  6.24846921e-02,
        -6.10628149e-01, -4.38137914e-02,  7.70715021e-01,
        -1.50302868e-01, -2.81731300e-02, -3.14771330e-02,
         5.80001402e-03, -2.18749236e-04, -1.39855145e-04,
         2.73672298e-06,  2.08694591e-08,  1.28638228e-10],
       [ 1.11775600e-02,  3.81069427e-02,  1.16484989e-01,
         6.94018048e-02, -9.80422495e-01, -3.89301766e-02,
        -1.21302616e-01, -1.00405856e-02, -4.97811944e-02,
         6.41020399e-04, -5.35559567e-05, -1.12987638e-04,
         2.66930135e-06,  1.14104606e-08,  3.93565821e-11],
       [ 7.66873300e-03,  2.89322971e-03,  4.14188313e-03,
         1.09022100e-01, -1.27649182e-01,  2.66849204e-01,
         9.19449236e-01, -1.78166301e-02,  2.33991804e-01,
        -8.36162662e-03,  4.50382235e-04, -6.49364171e-04,
         1.68434919e-05,  1.94553043e-08, -1.30224172e-10],
       [ 7.89143444e-03,  1.62597731e-02,  2.42330076e-02,
         6.23625819e-03,  1.01585767e-02, -3.40069245e-02,
        -8.67499219e-02, -9.43281351e-01,  3.06740816e-01,
        -7.97963912e-02,  1.56018254e-03,  4.73933141e-03,
        -6.78735378e-05, -6.30866813e-07, -4.58289243e-09],
       [-1.27673851e-03, -6.37214560e-03, -8.82639985e-03,
         5.54581081e-02,  1.66605389e-02,  4.98993008e-02,
         2.68341366e-01, -3.18938831e-01, -9.05458235e-01,
        -2.11806635e-02, -1.12102195e-03, -1.78276333e-03,
         7.87641526e-05, -3.19707970e-07, -1.25629827e-09],
       [-2.44769231e-04, -5.89987750e-04, -1.01091829e-03,
         4.72917794e-03,  6.81433927e-04, -5.00196280e-03,
         6.55526284e-03, -8.21217645e-02,  7.60143657e-03,
         9.95879577e-01, -2.75597767e-02,  2.38670066e-02,
        -8.21882768e-04,  3.79596564e-06,  2.30835108e-08],
       [-9.44246510e-04, -2.23352107e-03, -3.14308173e-03,
         9.18211637e-03, -1.22968100e-03,  9.72645964e-03,
         1.44906063e-02, -4.04757944e-03, -1.42696620e-02,
        -3.28227826e-02, -9.70686438e-01,  2.36035830e-01,
         1.87435965e-02, -3.14698063e-04, -9.13393212e-07],
       [-7.25334626e-07, -1.21595986e-05, -1.77846001e-05,
         1.56146933e-04, -1.64180641e-04,  4.42856571e-04,
         1.41761537e-03,  2.38272834e-03, -3.07521719e-03,
         2.05762837e-02,  2.35020090e-01,  9.71353899e-01,
        -2.82202940e-02, -1.39319532e-05, -2.15806316e-07],
       [ 6.80447263e-07,  1.73071328e-06,  2.92912522e-06,
        -1.46380275e-05, -6.70601568e-07,  1.06835635e-05,
        -2.94344728e-05,  2.10568314e-04,  1.90351427e-05,
        -3.96716772e-03, -2.69475298e-02, -3.20166616e-02,
        -9.99072970e-01,  9.28276557e-03,  1.01612642e-04],
       [ 5.93123952e-05,  1.42599054e-04,  2.00458780e-04,
        -6.12041119e-04, -2.96090542e-05, -5.55423166e-04,
        -1.10829129e-03,  1.16569659e-03,  3.22216478e-03,
         9.31806204e-05,  3.32637527e-04, -3.57348722e-04,
        -9.28873609e-03, -9.99944836e-01, -3.17496574e-03],
       [ 1.72220402e-05,  2.44839581e-06,  1.36460326e-05,
         2.14979703e-04,  2.24507847e-05, -2.56787768e-04,
         1.95378582e-05, -2.81798119e-04,  1.04920041e-04,
        -2.64360993e-05,  2.46986856e-06,  3.31427382e-06,
         7.20672342e-05, -3.17579432e-03,  9.99994852e-01]])
Vals = np.array([[1.51362666e+05],
       [9.39996141e+04],
       [5.27662888e+04],
       [5.04300277e+04],
       [3.27790711e+04],
       [3.61523700e+04],
       [2.25901985e+04],
       [1.14852128e+04],
       [1.33386223e+04],
       [5.56088120e+03],
       [1.13221657e+03],
       [1.79980589e+03],
       [2.86533307e+02],
       [8.68802164e+01],
       [1.38926073e+01]])




def show_all_wavefunction_nodes(U,lams,basis_set=basis_set):
    idx = np.abs(lams).argsort()
    lams, U = lams[idx], U[:,idx]

    N = U.shape[0]
    m,n = 5,3
    fig, axs = plt.subplots(m,n,figsize=(15,25))

    for k in range(N):
        (i,j) = (k//n, k%n)
        fun = vector_to_function(U[:,k],basis_set)
        axs[i,j].matshow(np.exp(-50*fun**2),origin='lower',extent=[-1,1,-1,1],cmap='PuBu')
        axs[i,j].set_xticklabels([])
        axs[i,j].set_yticklabels([])
        axs[i,j].set_title(r"$\lambda = {:.2f}$".format(lams[k]))
    plt.show()
